import FailedCard from '@/components/FailedCard'
import NewTodoItem from '@/components/NewTodoItem'
import TodoItem from '@/components/TodoItem'
import { Flex, Heading, Spinner } from '@chakra-ui/react'
import Head from 'next/head'
import useSWR from 'swr'


const fetcher = async (...args) => {
  const res = await fetch(...args)
  if (!res.ok) {
    const error = new Error("error occurred")
    error.info = await res.json()
    error.status = res.status
    throw error
  }
  return await res.json()
}

const address = process.env.NEXT_PUBLIC_SERVER_HOST
const basePath = `${address}/api/todo`
const onCheck = async (id, done, data, mutate) => {
  console.log("oncheck")
  let item = data.find(e => e.id === id)
  item.completed = done
  const path = `${basePath}/${id}`
  await fetcher(path, {
    method: "PATCH",
    body: JSON.stringify(item),
    headers: { "content-type": "application/json"},
  });
  mutate(data)

}

const onCreate = async(summary, mutate, data) => {
  console.log("creating new todo")
  const body = {summary: summary}
  const resp = await fetcher(basePath, {
    method: "POST",
    body: JSON.stringify(body),
    headers: { "content-type": "application/json"},
  });
  const newData = data ? [resp, ...data] : [resp]
  
  mutate(newData)
}

const onArchive = async (id, data, mutate) => {
  console.log("archiving item with id" + id)
  const path = `${basePath}/${id}`
  await fetcher(path, {
    method: "PATCH",
    body: JSON.stringify({deleted: true}),
    headers: { "content-type": "application/json"},
  });
  mutate(data)
}

export default function Home() {
  const { data, error, isLoading, mutate } = useSWR(basePath, fetcher)
  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Flex height="100vh" justifyContent="center" paddingTop={"5rem"} backgroundColor="gray.100">
        <Flex direction="column" width="66%" minWidth="300px" textAlign="center">
          <Heading mb={6} textAlign="center">Todo List</Heading>
          <NewTodoItem onCreate={(summary) => onCreate(summary, mutate, data)}/>
          { isLoading ? (
            <>
              <Spinner
                thickness='4px'
                speed='0.65s'
                emptyColor='gray.200'
                color='blue.500'
                size='xl'
                alignSelf="center"
              />
            </>
          ) : error ? (
              <FailedCard error={error} />
            ) : data ? (
            <>
              {  data.map((item, key) => {
               return <TodoItem item={item} onArchive={(id) => onArchive(id, data, mutate)} onComplete={(id, done) => onCheck(id, done, data, mutate)} key={key} />
              })}
            </>
            ) : (
              <></>
            )}
        </Flex>
      </Flex>
    </>
  )
}